<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
</HEAD>
<BODY>

<FONT SIZE=6>Упражнение 2. Нисходящее проектирование программ</FONT>
<hr>
Представленная в <a href="../UPR_01/up_simp.htm">упражнении 1</a> программа рисования 
Маски получилась уже достаточно громоздской, чтобы быстро ориентироваться в ней. 
Фактически, одной процедурой мы создали исполнителя, который рисует всю маску. 
Однако, большое количество однотипных операций затрудняет ориентацию в коде. 
При создании любой программы необходимо помнить и придерживаться следующего 
важного правила:
<hr>
<FONT COLOR=RED>
Любая программа создается человеком и должна быть понятна в первую очередь
человеку. Транслятору безразлично оформление программы. Например, следующие
два фрагмента для него абсолютно одинаковы
<PRE><FONT COLOR=BLUE>
 <b>with</b> Canvas <b>do</b>  
  <b>begin</b> 
    Brush.Color:=clGreen;     
    Rectangle(100,275,200,285); 
  <b>end</b>;</FONT>
и <FONT COLOR=BLUE>
 <b>with</b> Canvas <b>do begin</b> Brush.Color:=clGreen; Rectangle(100,275,200,285) <b>end</b>;
</FONT></PRE>
Однако, первый фрагмент читается безусловно легче. Необходимо стараться
вырабатывать свой стиль в оформлении программ, понятный любому другому
человеку. Например, делать отступы в тексте программы, операторные скобки
писать друг под другом и т.п.
</FONT>
<hr>

<P>Стиль оформления программы является одним из важнейших способов повысить ее 
читаемость, а значит и сократить время на ее отладку. Комментарии к программе
также позволяют улучшить ее читаемость. Однако, число комментариев не 
должно быть слишком большим. Перегруженность кода комментариями только отвлекает 
внимание программиста, затрудняя понимание структуры программы второстепенными 
деталями.</P>
<P>Любую программу можно рассматривать как инструкцию некоторому исполнителю,
выполняющему те или иные работы. Если инструкция слишком длинна, то легко
запутаться при ее составлении, что приведет к неверной работе исполнителя.
Как правило, отладка инструкции усложняется, если ее всю нельзя охватить
взглядом (например, увидеть на экране монитора). Стиль оформления и комментарии
в этом случае помогают мало. Более действенным является прием, который основывается
на принципе "Разделяй и властвуй". В программировании реализация данного
принципа приводит к технологии нисходящего программирования. Суть данного
поясним на примере исполнителя "Маска".</P>

<A name="заглушка"> </A>
<P><b>Шаг 1</b>.Пусть на <u>первом этапе</u> исполнитель, рисующий маску, реализуется следующей 
процедурой
<PRE><FONT COLOR=BLUE>
<b>procedure</b> Maska;  <FONT COLOR=RED>// исполнитель МАСКА</FONT>
<b>begin</b> 
<b>end</b>;
</FONT></PRE>
Данная процедура ничего не выполняет. Будем называть подобные "пустые" процедуры
<i>заглушками</i>. Заглушка синтаксически правильна и ее можно вызвать из обработчика 
события <b>OnPaint</b>
<PRE><FONT COLOR=BLUE>
<b>procedure</b> TForm1.FormPaint(Sender: TObject);
<b>begin</b>
    Maska;
<b>end</b>;
</FONT></PRE>
<b>Шаг 2</b>.На <u>втором этапе</u> детализируем описание маски, состоящей из внешнего 
контура, глаз, носа и рта
<PRE><FONT COLOR=BLUE>
  <b>procedure</b> Kontur;  <FONT COLOR=RED>// рисуем контур маски</FONT>
  <b>begin</b> 
  <b>end</b>;
  <b>procedure</b> Glaz;   <FONT COLOR=RED>// рисуем левый и правый глаз</FONT>
  <b>begin</b> 
  <b>end</b>;
  <b>procedure</b> Nos;    <FONT COLOR=RED>// рисуем нос</FONT>
  <b>begin</b> 
  <b>end</b>;
  <b>procedure</b> Rot;    <FONT COLOR=RED>// рисуем рот</FONT>
  <b>begin</b> 
  <b>end</b>;
<b>procedure</b> Maska;    <FONT COLOR=RED>// исполнитель МАСКА</FONT>
<b>begin</b> 
   Kontur;
   Glaz;
   Nos;
   Rot;
<b>end</b>;
</FONT></PRE>
На этом этапе мы ввели вспомогательных исполнителей, управляемых исполнителем
"Маска". Самих исполнителей мы пока заменили заглушками. Код обработчика
события <b>OnPaint</b> менять уже не нужно. Мы имеем рабочую программу, которая
пока ничего не рисует, однако можно уже представить, какую работу данная 
программа будет выполнять.<br>
Взаимосвязь исполнителей можно отобразить следующей диаграммой
<PRE>
    Исполнитель МАСКА
          |
  +-------+-----+-----+
  |       |     |     |
Контур  Глаз   Нос   Рот
</PRE>

<b>Шаг 3</b>.Наконец, на <u>третьем этапе</u> реализум код вспомогательных исполнителей 
<PRE><FONT COLOR=BLUE>
<b>procedure</b> Kontur;    <FONT COLOR=RED>// рисуем контур маски</FONT>
<b>begin</b> 
   <b>with</b> Form1.Canvas <b>do</b>   
    <b>begin</b> Pen.Style:=psSolid;
      Pen.Color:=clBlack;    
      Pen.Width:=3;           
      Brush.Style:=bsSolid;   
      Brush.Color:=clBlue;    
      Ellipse(50,50,250,350); 
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Glaz;  <FONT COLOR=RED>// рисуем левый и правый глаз</FONT>
<b>begin</b> 
   <b>with</b> Form1.Canvas <b>do</b>
    <b>begin</b> 
      Brush.Color:=clRed;       
      Ellipse(100,100,125,200);
      Ellipse(175,100,200,200);
      Brush.Color:=clBlack;     
      Ellipse(105,150,120,175);
      Ellipse(180,150,195,175);
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Nos;  <FONT COLOR=RED>// рисуем нос</FONT>
<b>begin</b> 
   <b>with</b> Form1.Canvas <b>do</b>  
    <b>begin</b> 
      Brush.Color:=clGreen;     
      Rectangle(145,100,155,265); 
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Rot;  <FONT COLOR=RED>// рисуем рот</FONT>
<b>begin</b> 
   <b>with</b> Form1.Canvas <b>do</b> 
    <b>begin</b> 
      Brush.Color:=clGreen;     
      Rectangle(100,275,200,285); 
    <b>end</b>;
<b>end</b>;
</FONT></PRE>

Итак, с использованием нисходящего подхода в три этапа мы разработали программу,
рисующую Маску. Подобный структурный подход позволяет успешно решать задачи 
создания очень сложных исполнителей. Двигаясь от общего к частному, мы не 
только можем разобраться с объектом какой угодно сложности, но и на каждом 
этапе иметь рабочую программу, усложняя ее по мере необходимости. При этом
код основного исполнителя и каждого вспомогательного остается небольшим,
удобным для анализа и отладки. Использование вспомогательных исполнителей
позволяет сократить число комментариев, сохранив читаемость и понятность
программы.</P>

<P>Следует обратить внимание, что вспомогательные исполнители могут 
рисовать только на форме с указанием ее конкретного названия (поле Name формы 
с присвоенным названием в данном случае Form1), имеющей компонент <a href="../../graph/gr_canv.htm">TCanvas</a>.
Однако компонент TCanvas имеется не только у формы, но и у некоторых 
других визуальных и невизуальных компонент. Как можно сделать, чтобы
маска рисовалась на любом компоненте <b>TCanvas</b>?  Для этого необходимо
исполнителю Maska и вспомогательным исполнителям передать требуемую "канву"
в качестве параметра. Исправленный код процедур приведен ниже.
<PRE><FONT COLOR=BLUE>
<b>procedure</b> Kontur(CNV: TCanvas); <FONT COLOR=RED>// рисуем контур маски</FONT>
<b>begin</b> 
   <b>with</b> CNV <b>do</b>   
    <b>begin</b> Pen.Style:=psSolid;
      Pen.Color:=clBlack;    
      Pen.Width:=3;           
      Brush.Style:=bsSolid;   
      Brush.Color:=clBlue;    
      Ellipse(50,50,250,350); 
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Glaz(CNV: TCanvas);  <FONT COLOR=RED>// рисуем левый и правый глаз</FONT>
<b>begin</b> 
   <b>with</b> CNV <b>do</b>
    <b>begin</b> 
      Brush.Color:=clRed;       
      Ellipse(100,100,125,200);
      Ellipse(175,100,200,200);
      Brush.Color:=clBlack;     
      Ellipse(105,150,120,175);
      Ellipse(180,150,195,175);
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Nos(CNV: TCanvas);  <FONT COLOR=RED>// рисуем нос</FONT>
<b>begin</b> 
   <b>with</b> CNV <b>do</b>  
    <b>begin</b> 
      Brush.Color:=clGreen;     
      Rectangle(145,100,155,265); 
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Rot(CNV: TCanvas);  <FONT COLOR=RED>// рисуем рот</FONT>
<b>begin</b> 
   <b>with</b> CNV <b>do</b> 
    <b>begin</b> 
      Brush.Color:=clGreen;     
      Rectangle(100,275,200,285); 
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Maska(CNV: TCanvas); <FONT COLOR=RED>// исполнитель МАСКА</FONT> 
<b>begin</b> 
   Kontur(CNV);
   Glaz(CNV);
   Nos(CNV);
   Rot(CNV);
<b>end</b>;
<b>procedure</b> TForm1.FormPaint(Sender: TObject);
<b>begin</b>
    Maska(Canvas);
<b>end</b>;
</FONT></PRE>

Использование структурного подхода позволяет не только улучшить читаемость
программ, но и выделить схожие элементы. Например, левый и правый глаза Маски
отличаются только положением, но одинаковы по форме. Положение глаза
можно задать с помощью координат (x,y) его левого верхнего угла. Тогда процедуру
рисования глаз и всей маски можно описать следующим образом
<PRE><FONT COLOR=BLUE>
<b>procedure</b> Glaz(CNV: TCanvas; x,y: integer); <FONT COLOR=RED>// рисуем глаз</FONT>
<b>begin</b> 
   <b>with</b> CNV <b>do</b>
    <b>begin</b> 
      Brush.Color:=clRed;       
      Ellipse(x,y,x+25,y+100);
      Brush.Color:=clBlack;     
      Ellipse(x+5,y+50,x+20,y+75);
    <b>end</b>;
<b>end</b>;
<b>procedure</b> Maska(CNV: TCanvas);  <FONT COLOR=RED>// исполнитель МАСКА</FONT> 
<b>begin</b> 
   Kontur(CNV);
   Glaz(CNV,100,100); <FONT COLOR=RED>//левый глаз</FONT> 
   Glaz(CNV,175,100); <FONT COLOR=RED>//правый глаз</FONT> 
   Nos(CNV);
   Rot(CNV);
<b>end</b>;
</FONT></PRE>
</P>

<hr>
<a href="../upr.htm"><i>вернуться к оглавлению</i></a><br>  

</BODY>
</HTML>
